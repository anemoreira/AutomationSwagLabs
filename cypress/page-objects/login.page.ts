export class LoginPage {
  // URL da p√°gina de login (o caminho relativo)
  url = "/";

  // Agrupando todos os seletores em um objeto `selectors`
  private selectors = {
    btnLogin: '[data-test="login-button"]',      // Bot√£o de login
    inputPassword: '[data-test="password"]',      // Campo de senha
    inputUsername: '[data-test="username"]',      // Campo de nome de usu√°rio
    errorMessage: '[data-test="error"]',          // Mensagem de erro
    errorContainer: '.error-message-container',   // Container de erro
    linkLogout: '#logout_sidebar_link',           // Link para logout no menu lateral
    menuButton: '#react-burger-menu-btn',         // Bot√£o do menu lateral (hamburguer menu)
    menuContainer: '.bm-menu',                    // Container do menu lateral
  };

  // Fun√ß√£o que retorna o bot√£o de login
  btnLogin() {
    return cy.get(this.selectors.btnLogin);
  }

  // Fun√ß√£o que retorna o campo de entrada da senha
  inputPassword() {
    return cy.get(this.selectors.inputPassword);
  }

  // Fun√ß√£o que valida se a mensagem de erro para o campo de senha aparece quando o campo √© deixado vazio
  inputPasswordRequired() {
    cy.get(this.selectors.errorContainer).should("be.visible"); // Verifica se o container de erro est√° vis√≠vel
    cy.get(this.selectors.errorMessage).should(
      "have.text",
      "Epic sadface: Password is required" // Verifica se a mensagem de erro correta √© exibida
    );
  }

  // Fun√ß√£o que retorna o campo de entrada do nome de usu√°rio
  inputUsername() {
    return cy.get(this.selectors.inputUsername);
  }

  // Fun√ß√£o que valida se a mensagem de erro para o campo de nome de usu√°rio aparece quando o campo √© deixado vazio
  inputUsernameRequired() {
    cy.get(this.selectors.errorContainer).should("be.visible"); // Verifica se o container de erro est√° vis√≠vel
    cy.get(this.selectors.errorMessage).should(
      "have.text",
      "Epic sadface: Username is required" // Verifica a mensagem de erro correta √© exibida
    );
  }

  // Fun√ß√£o que valida se a mensagem de erro aparece quando as credenciais de login s√£o inv√°lidas
  invalidUsernameOrPassword() {
    cy.get(this.selectors.errorContainer).should("be.visible"); // Verifica se o container de erro est√° vis√≠vel
    cy.get(this.selectors.errorMessage).should(
      "have.text",
      "Epic sadface: Username and password do not match any user in this service" // Verifica a mensagem de erro
    );
  }

  // Fun√ß√£o que verifica se estamos na p√°gina de produtos ap√≥s o login bem-sucedido
  isProductsPage() {
    cy.url().should("contain", "inventory.html"); // Verifica se a URL cont√©m 'inventory.html', indicando que a p√°gina de produtos foi carregada
  }

  // Fun√ß√£o que verifica se estamos na p√°gina de login (caso ainda n√£o tenha feito login)
  isLoginPage() {
    cy.url().should("eq", Cypress.config().baseUrl); // Verifica se a URL corresponde √† URL base configurada no Cypress
  }

  // Fun√ß√£o que retorna o link para o logout no menu lateral
  linkLogout() {
    return cy.get(this.selectors.linkLogout);
  }

  // Fun√ß√£o que realiza o login utilizando as credenciais fornecidas no arquivo de ambiente
  login() {
    // Obtendo credenciais de login armazenadas no arquivo de ambiente do Cypress
    const username = Cypress.env("username"); // Obt√©m o nome de usu√°rio
    const password = Cypress.env("password"); // Obt√©m a senha

    // Verificando se as credenciais est√£o definidas
    if (!username || !password) {
      throw new Error(
        "‚ö†Ô∏è Error: Login credentials were not found. Check the .env file!" 
        // Se as credenciais n√£o estiverem definidas, lan√ßa um erro
      );
    }

    // Exibindo as credenciais no console para depura√ß√£o (remova isso em produ√ß√£o)
    console.log("üîπ Cypress.env -> Username:", username); 
    console.log("üîπ Cypress.env -> Password:", password ? "*****" : "NOT DEFINED"); // Exibe a senha (mas com a senha mascarada para seguran√ßa)

    // Realizando o login com as credenciais
    this.inputUsername().type(username); // Preenche o campo de nome de usu√°rio com o valor armazenado
    this.inputPassword().type(password, { log: false }); // Preenche o campo de senha com o valor armazenado (n√£o loga a senha para seguran√ßa)
    this.btnLogin().click(); // Clica no bot√£o de login
    this.isProductsPage(); // Verifica se a URL agora cont√©m 'inventory.html', confirmando que estamos na p√°gina de produtos
  }

  // Fun√ß√£o que abre o menu lateral (hamburguer menu)
  menuBurger() {
    cy.get(this.selectors.menuButton).click(); // Clica no bot√£o do menu lateral
    cy.get(this.selectors.menuContainer).should("be.visible"); // Verifica se o menu lateral est√° vis√≠vel ap√≥s o clique
  }
}
